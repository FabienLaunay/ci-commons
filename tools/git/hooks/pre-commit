#!/bin/bash

# ==============================================================================
# Copy 'tools' to 'ci-commons' if Git hooks used within 'ci-commons' project.
# ==============================================================================

script_dir=$(dirname "$(realpath "$0")")

if [[ -e "$script_dir/../../../copyToolsToCiCommons" ]]; then
  rsync \
    --archive \
    --delete \
    --checksum \
    tools \
    ci-commons
#  ((totalL1TaskCount++))
#  printStartingL1TaskTextBox "'tools' directory copy to 'ci-commons'"
#  command="rsync
#  --archive
#  --delete
#  --verbose
#  --checksum
#  tools
#  ci-commons"
#  printExecutingCommand "$command"
#  $command
#  printCompletedL1TaskTextBoxAndIncrementCounter
fi

# ==============================================================================
# Execute Git pre-commit hooks.
# ==============================================================================

. ci-commons/tools/common/bsh/message.bash

printLargeTextBoxForGitHooks "Pre-Commit Hook"

currentL1TaskNumber="1"
totalL1TaskCount="1"

printStartingL1TaskTextBox "pre-commit hooks execution"

python='C:\ProgramFiles\Code\Python\python.exe'

command=""
if [ -x "$python" ]; then
  command="$python
  -mpre_commit"
elif command -v pre-commit >/dev/null; then
  command="pre-commit"
fi

if [[ "$command" == "" ]]; then
  echo ''
  printErrorMessage "pre-commit not found." 1>&2
  exit 1
fi

command+="
  hook-impl
    --config=ci-commons/tools/pre-commit/preCommitConfig.yaml
    --hook-type=pre-commit
    --hook-dir=$script_dir"

# Remove the lock file (if any) at the start
LOCK_FILE="tools/git/hooks/pre-commit-failed"
rm -f "$LOCK_FILE"

printExecutingCommand "$command"
$command
if [[ $? -ne 0 ]]; then
  touch "$LOCK_FILE"
  echo ''
  printErrorMessage "Git pre-commit hook(s) failed. Please fix the issues" \
    "listed above."
  printCompletedL1TaskTextBoxAndIncrementCounter
  exit 1
fi
printCompletedL1TaskTextBoxAndIncrementCounter
exit 0
